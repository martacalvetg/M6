{"ast":null,"code":"import { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class ClientesService {\n  constructor() {\n    //  public clienteName = new BehaviorSubject<string>('');\n    //  castCliente = this.clienteName.asObservable();\n    //  public clientePrice = new BehaviorSubject<string>('');\n    //  castPrice = this.clientePrice.asObservable();\n    //  public broadCastClienteName(name:string, price:string){\n    //      this.clienteName.next(name);\n    //      this.clientePrice.next(price);\n    //  }\n    this.clientes = [];\n  }\n  sendClientes(name, price) {\n    if (name != \"\" && price != \"\") {\n      this.clientes.push({\n        name: name,\n        price: price\n      });\n    }\n    return of(this.clientes);\n  }\n}\nClientesService.ɵfac = function ClientesService_Factory(t) {\n  return new (t || ClientesService)();\n};\nClientesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClientesService,\n  factory: ClientesService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAA0BA,EAAE,QAAQ,MAAM;;AAM1C,OAAM,MAAOC,eAAe;EACxBC;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IAEA,aAAQ,GAAa,EAAE;EAZT;EAcNC,YAAY,CAACC,IAAW,EAAEC,KAAY;IACzC,IAAGD,IAAI,IAAI,EAAE,IAAIC,KAAK,IAAI,EAAE,EAAC;MACzB,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC;QAACH,IAAI,EAAEA,IAAI;QAAEC,KAAK,EAAEA;MAAK,CAAC,CAAC;;IAElD,OAAOL,EAAE,CAAE,IAAI,CAACM,QAAQ,CAAC;EAC7B;;AApBQL,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAO,SAAfP,eAAe;AAAA","names":["of","ClientesService","constructor","sendClientes","name","price","clientes","push","factory"],"sourceRoot":"","sources":["E:\\ANGULAR\\practica3\\servicios\\clientServices.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, of } from \"rxjs\";\nimport { Observable } from 'rxjs/internal/Observable';\n\n\n\n@Injectable()\nexport class ClientesService{\n    constructor(){}\n    //  public clienteName = new BehaviorSubject<string>('');\n    //  castCliente = this.clienteName.asObservable();\n\n    //  public clientePrice = new BehaviorSubject<string>('');\n    //  castPrice = this.clientePrice.asObservable();\n\n    //  public broadCastClienteName(name:string, price:string){\n    //      this.clienteName.next(name);\n    //      this.clientePrice.next(price);\n    //  }\n\n    clientes:Cliente[] = [];\n\n     public sendClientes(name:string, price:string):Observable<Cliente[]>{\n         if(name != \"\" && price != \"\"){\n             this.clientes.push({name: name, price: price});\n         }\n         return of (this.clientes);\n     }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}