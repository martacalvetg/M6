{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidLegalEntityNif = exports.isValidLegalEntityNifControlCode = exports.LEGAL_ENTITY_NIF_REGEX = exports.LEGAL_ENTITY_CONTROL_LETTERS = void 0;\nexports.LEGAL_ENTITY_CONTROL_LETTERS = \"JABCDEFGHI\";\nexports.LEGAL_ENTITY_NIF_REGEX = /^[ABCDEFGHJNPQRSUVW][\\d]{7}[\\dA-J]$/i;\nconst HAS_CONTROL_LETTER_REGEX = /^[PQRSW]/;\nconst HAS_CONTROL_LETTER_IDENTIFIER = \"00\";\nconst HAS_CONTROL_NUMBER_REGEX = /^[ABEH]/;\nfunction sumEvenPositions(legalEntityNumbers) {\n  return +legalEntityNumbers[1] + +legalEntityNumbers[3] + +legalEntityNumbers[5];\n}\nfunction calculateOddPosition(num) {\n  const doubledNum = num * 2;\n  if (doubledNum < 10) return doubledNum;\n  const splittedNum = `${doubledNum}`.split(\"\");\n  return +splittedNum[0] + +splittedNum[1];\n}\nfunction calculateOddPositions(legalEntityNumbers) {\n  return calculateOddPosition(+legalEntityNumbers[0]) + calculateOddPosition(+legalEntityNumbers[2]) + calculateOddPosition(+legalEntityNumbers[4]) + calculateOddPosition(+legalEntityNumbers[6]);\n}\nfunction getLegalEntityNumbers(legalEntityNif) {\n  return legalEntityNif.slice(1, -1);\n}\nfunction getLegalEntityNifControlNumber(nif) {\n  const legalEntityNumbers = getLegalEntityNumbers(nif);\n  const keyNumber = +`${sumEvenPositions(legalEntityNumbers) + calculateOddPositions(legalEntityNumbers)}`.slice(-1);\n  return keyNumber === 0 ? keyNumber : 10 - keyNumber;\n}\nfunction isControlCodeLetter(legalEntityNif) {\n  return HAS_CONTROL_LETTER_REGEX.test(legalEntityNif) || legalEntityNif[0] === HAS_CONTROL_LETTER_IDENTIFIER;\n}\nfunction isControlCodeNumber(legalEntityNif) {\n  return HAS_CONTROL_NUMBER_REGEX.test(legalEntityNif);\n}\n/**\n * Checks if the legal entity nif control code (letter or number)\n * provided is valid.\n *\n * @WARNING It does not check the `LEGAL_ENITY_NIF_REGEX`.\n * @throws May throw an error if the string is not long enough (9 characters)\n * @param legalEntityNif\n * @returns\n */\nfunction isValidLegalEntityNifControlCode(legalEntityNif) {\n  const controlCodeToVerify = legalEntityNif.slice(-1);\n  const controlNumber = getLegalEntityNifControlNumber(legalEntityNif);\n  if (isControlCodeLetter(legalEntityNif)) return exports.LEGAL_ENTITY_CONTROL_LETTERS[controlNumber] === controlCodeToVerify;\n  if (isControlCodeNumber(legalEntityNif)) return controlNumber === +controlCodeToVerify;\n  return isNaN(+controlCodeToVerify) ? exports.LEGAL_ENTITY_CONTROL_LETTERS[controlNumber] === controlCodeToVerify : controlNumber === +controlCodeToVerify;\n}\nexports.isValidLegalEntityNifControlCode = isValidLegalEntityNifControlCode;\n/**\n * Checks if the legalEntityNif provided is valid.\n *\n * It does not include old K, L and M formats.\n * @param legalEntityNif\n * @returns true for valid input and false for invalid input.\n */\nfunction isValidLegalEntityNif(legalEntityNif) {\n  return exports.LEGAL_ENTITY_NIF_REGEX.test(legalEntityNif) && isValidLegalEntityNifControlCode(legalEntityNif);\n}\nexports.isValidLegalEntityNif = isValidLegalEntityNif;","map":{"version":3,"names":["Object","defineProperty","exports","value","isValidLegalEntityNif","isValidLegalEntityNifControlCode","LEGAL_ENTITY_NIF_REGEX","LEGAL_ENTITY_CONTROL_LETTERS","HAS_CONTROL_LETTER_REGEX","HAS_CONTROL_LETTER_IDENTIFIER","HAS_CONTROL_NUMBER_REGEX","sumEvenPositions","legalEntityNumbers","calculateOddPosition","num","doubledNum","splittedNum","split","calculateOddPositions","getLegalEntityNumbers","legalEntityNif","slice","getLegalEntityNifControlNumber","nif","keyNumber","isControlCodeLetter","test","isControlCodeNumber","controlCodeToVerify","controlNumber","isNaN"],"sources":["E:/ANGULAR/practica3/node_modules/nif-dni-nie-cif-validation/dist/nif/legalEntityNif/legalEntityNif.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValidLegalEntityNif = exports.isValidLegalEntityNifControlCode = exports.LEGAL_ENTITY_NIF_REGEX = exports.LEGAL_ENTITY_CONTROL_LETTERS = void 0;\nexports.LEGAL_ENTITY_CONTROL_LETTERS = \"JABCDEFGHI\";\nexports.LEGAL_ENTITY_NIF_REGEX = /^[ABCDEFGHJNPQRSUVW][\\d]{7}[\\dA-J]$/i;\nconst HAS_CONTROL_LETTER_REGEX = /^[PQRSW]/;\nconst HAS_CONTROL_LETTER_IDENTIFIER = \"00\";\nconst HAS_CONTROL_NUMBER_REGEX = /^[ABEH]/;\nfunction sumEvenPositions(legalEntityNumbers) {\n    return (+legalEntityNumbers[1] + +legalEntityNumbers[3] + +legalEntityNumbers[5]);\n}\nfunction calculateOddPosition(num) {\n    const doubledNum = num * 2;\n    if (doubledNum < 10)\n        return doubledNum;\n    const splittedNum = `${doubledNum}`.split(\"\");\n    return +splittedNum[0] + +splittedNum[1];\n}\nfunction calculateOddPositions(legalEntityNumbers) {\n    return (calculateOddPosition(+legalEntityNumbers[0]) +\n        calculateOddPosition(+legalEntityNumbers[2]) +\n        calculateOddPosition(+legalEntityNumbers[4]) +\n        calculateOddPosition(+legalEntityNumbers[6]));\n}\nfunction getLegalEntityNumbers(legalEntityNif) {\n    return legalEntityNif.slice(1, -1);\n}\nfunction getLegalEntityNifControlNumber(nif) {\n    const legalEntityNumbers = getLegalEntityNumbers(nif);\n    const keyNumber = +`${sumEvenPositions(legalEntityNumbers) +\n        calculateOddPositions(legalEntityNumbers)}`.slice(-1);\n    return keyNumber === 0 ? keyNumber : 10 - keyNumber;\n}\nfunction isControlCodeLetter(legalEntityNif) {\n    return (HAS_CONTROL_LETTER_REGEX.test(legalEntityNif) ||\n        legalEntityNif[0] === HAS_CONTROL_LETTER_IDENTIFIER);\n}\nfunction isControlCodeNumber(legalEntityNif) {\n    return HAS_CONTROL_NUMBER_REGEX.test(legalEntityNif);\n}\n/**\n * Checks if the legal entity nif control code (letter or number)\n * provided is valid.\n *\n * @WARNING It does not check the `LEGAL_ENITY_NIF_REGEX`.\n * @throws May throw an error if the string is not long enough (9 characters)\n * @param legalEntityNif\n * @returns\n */\nfunction isValidLegalEntityNifControlCode(legalEntityNif) {\n    const controlCodeToVerify = legalEntityNif.slice(-1);\n    const controlNumber = getLegalEntityNifControlNumber(legalEntityNif);\n    if (isControlCodeLetter(legalEntityNif))\n        return exports.LEGAL_ENTITY_CONTROL_LETTERS[controlNumber] === controlCodeToVerify;\n    if (isControlCodeNumber(legalEntityNif))\n        return controlNumber === +controlCodeToVerify;\n    return isNaN(+controlCodeToVerify)\n        ? exports.LEGAL_ENTITY_CONTROL_LETTERS[controlNumber] === controlCodeToVerify\n        : controlNumber === +controlCodeToVerify;\n}\nexports.isValidLegalEntityNifControlCode = isValidLegalEntityNifControlCode;\n/**\n * Checks if the legalEntityNif provided is valid.\n *\n * It does not include old K, L and M formats.\n * @param legalEntityNif\n * @returns true for valid input and false for invalid input.\n */\nfunction isValidLegalEntityNif(legalEntityNif) {\n    return (exports.LEGAL_ENTITY_NIF_REGEX.test(legalEntityNif) &&\n        isValidLegalEntityNifControlCode(legalEntityNif));\n}\nexports.isValidLegalEntityNif = isValidLegalEntityNif;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}