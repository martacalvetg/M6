{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class ClientesService {\n  constructor() {\n    this.clienteName = new BehaviorSubject('');\n    this.castCliente = this.clienteName.asObservable();\n    this.clientePrice = new BehaviorSubject('');\n    this.castPrice = this.clientePrice.asObservable();\n  }\n  broadCastClienteName(name, price) {\n    this.clienteName.next(name);\n    this.clientePrice.next(price);\n  }\n}\nClientesService.ɵfac = function ClientesService_Factory(t) {\n  return new (t || ClientesService)();\n};\nClientesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClientesService,\n  factory: ClientesService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAGtC,OAAM,MAAOC,eAAe;EACxBC;IACQ,gBAAW,GAAG,IAAIF,eAAe,CAAS,EAAE,CAAC;IACpD,gBAAW,GAAG,IAAI,CAACG,WAAW,CAACC,YAAY,EAAE;IAEtC,iBAAY,GAAG,IAAIJ,eAAe,CAAS,EAAE,CAAC;IACrD,cAAS,GAAG,IAAI,CAACK,YAAY,CAACD,YAAY,EAAE;EAL/B;EAONE,oBAAoB,CAACC,IAAW,EAAEC,KAAY;IACjD,IAAI,CAACL,WAAW,CAACM,IAAI,CAACF,IAAI,CAAC;IAC3B,IAAI,CAACF,YAAY,CAACI,IAAI,CAACD,KAAK,CAAC;EACjC;;AAXQP,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAS,SAAfT,eAAe;AAAA","names":["BehaviorSubject","ClientesService","constructor","clienteName","asObservable","clientePrice","broadCastClienteName","name","price","next","factory"],"sourceRoot":"","sources":["E:\\ANGULAR\\practica3\\servicios\\clientServices.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\n\n@Injectable()\nexport class ClientesService{\n    constructor(){}\n     public clienteName = new BehaviorSubject<string>('');\n     castCliente = this.clienteName.asObservable();\n\n     public clientePrice = new BehaviorSubject<string>('');\n     castPrice = this.clientePrice.asObservable();\n\n     public broadCastClienteName(name:string, price:string){\n         this.clienteName.next(name);\n         this.clientePrice.next(price);\n     }\n\n    // clientes:Cliente[] = [ ];\n\n    // public sendCliente(name:string, price:string):Observable<Cliente[]>{\n    //     if(name != \"\" && price != \"\"){\n    //         this.cliente.push({name: name, price: price});\n    //     }\n    //     return of(this.cliente);\n    // }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}